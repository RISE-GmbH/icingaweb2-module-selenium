<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium;



use DateTime;
use DateTimeZone;
use DirectoryIterator;
use Icinga\Application\Logger;
use Icinga\Application\Modules\Module;
use Icinga\Module\Selenium\Model\Testrun;
use ipl\Sql\Connection;
use SplFileInfo;

class TestrunHelper
{

    protected $db;


    public function __construct(Connection $db)
    {
        $this->db = $db;
    }

    public function cleanUp(){
        $datetime = new DateTime();
        $datetime->setTimezone(new DateTimeZone(date_default_timezone_get()));
        $deletedImages=0;
        $deletedRuns=0;
        $imageRetentionPolicy = Module::get('selenium')->getConfig('config')->getSection('images')->get('retentionpolicy',30);
        $testrunRetentionPolicy = Module::get('selenium')->getConfig('config')->getSection('testruns')->get('retentionpolicy',30);
        foreach (Testrun::on($this->db) as $run){
            /* @var $run Testrun */
            $interval = $datetime->diff($run->ctime, true);
            $images = $run->getImages();
            if($interval->days > $testrunRetentionPolicy){
                $run->delete();
                $deletedRuns++;
                $deletedImages+=count($images);
                continue;
            }
            foreach ($images as $image){
                $fileTime = new DateTime();
                $fileTime->setTimestamp(filectime($image));
                $fileTime->setTimezone(new DateTimeZone(date_default_timezone_get()));
                $interval = $datetime->diff($fileTime, true);
                if($interval->days >= $imageRetentionPolicy){
                    unlink($image);
                    $deletedImages++;
                }
            }
        }
        $imagePath =Module::get('selenium')->getConfig('config')->getSection('images')->get('path',Module::get('selenium')->getConfigDir().DIRECTORY_SEPARATOR."images");

        if (is_dir($imagePath)) {
            $iterator = new DirectoryIterator($imagePath);
            foreach ($iterator as $fileinfo) {
                /* @var $fileinfo SplFileInfo */
                if ($fileinfo->isDot()) {
                    continue;
                }
                $filename = $fileinfo->getFilename();
                if ($fileinfo->isFile()) {
                    $extension = $fileinfo->getExtension();
                    if($extension !== "png"){
                        continue;
                    }else{

                        $fileTime = new DateTime();
                        $fileTime->setTimestamp($fileinfo->getCTime());
                        $fileTime->setTimezone(new DateTimeZone(date_default_timezone_get()));
                        $interval = $datetime->diff($fileTime, true);
                        if($interval->days >= $imageRetentionPolicy){
                            unlink($fileinfo->getPathname());

                            $deletedImages++;
                        }
                    }
                }
            }
        } else {
            echo "The specified path $imagePath is not a directory.";
        }

        return ['deletedImages'=>$deletedImages, 'deletedTestruns'=>$deletedRuns];
    }

}
