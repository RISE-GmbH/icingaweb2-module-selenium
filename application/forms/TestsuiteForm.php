<?php

/* originally from Icinga Web 2 Reporting Module | (c) 2019 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium\Forms;

use Icinga\Application\Icinga;
use Icinga\Module\Selenium\Common\Database;
use Icinga\Module\Selenium\Model\Testsuite;
use Icinga\Module\Selenium\SuiteHelper;
use ipl\Html\Contract\FormSubmitElement;
use ipl\Html\HtmlDocument;
use ipl\Html\HtmlElement;
use ipl\Sql\Connection;
use ipl\Stdlib\Filter;
use ipl\Web\Compat\CompatForm;
use ipl\Web\Url;

class TestsuiteForm extends CompatForm
{

    protected $id;
    /** @var Connection $db */
    protected $db;
    protected $renderCreateAndShowButton = false;
    protected $submitButtonLabel;

    /**
     * Set whether the create and show submit button should be rendered
     *
     * @param bool $renderCreateAndShowButton
     *
     * @return \Icinga\Module\Selenium\Forms\TestsuiteForm
     */
    public function setRenderCreateAndShowButton(bool $renderCreateAndShowButton): self
    {
        $this->renderCreateAndShowButton = $renderCreateAndShowButton;

        return $this;
    }

    /**
     * Create a new form instance with the given testsuite id
     *
     * @param $id
     *
     * @return \Icinga\Module\Selenium\Forms\TestsuiteForm
     */
    public static function fromId($id): self
    {
        $form = new static();
        $form->id = $id;

        return $form;
    }

    public function getId()
    {
        return $this->id;
    }

    public function getDb() :Connection
    {
        return $this->db;
    }

    public function setDb($db)
    {
        $this->db = $db;
        return $this;
    }


    public function hasBeenSubmitted(): bool
    {
        return $this->hasBeenSent() && (
                $this->getPopulatedValue('submit')
                || $this->getPopulatedValue('create_show')
                || $this->getPopulatedValue('remove')
            );
    }

    public function setId($id)
    {
        $this->id = $id;

        return $this;
    }
    /**
     * Get the label of the submit button
     *
     * @return string
     */
    public function getSubmitButtonLabel(): string
    {
        if ($this->submitButtonLabel !== null) {
            return $this->submitButtonLabel;
        }

        return $this->id === null ? $this->translate('Create Testsuite') : $this->translate('Update Testsuite');
    }
    protected function assemble()
    {

        $columns = (new Testsuite())->getColumnDefinitions();



        foreach ($columns as $column=>$options){
            if($column == "reference_object"){
                continue;
            }
            if(is_array($options)){
                $fieldtype = $options['fieldtype']??"text";
                unset($options['fieldtype']);
                $this->addElement($fieldtype, $column, $options);
            }else{
                $this->addElement('text', $column, [
                    'label' => $options
                ]);
            }
        }


        $suggestionsId = Icinga::app()->getRequest()->protectId('single-value-suggestions');

        $this->addElement(
            'text',
            "reference_object",
            [
                'label' =>$columns['reference_object']['label'],
                'description' =>$columns['reference_object']['description'],
                //'style' => "width:100%; padding-left: 1.5em!important;",
                'required' => false,
                'minlength' => 1,
                'autocomplete' => 'off',
                'class' => 'search',
                'data-enrichment-type' => 'completion',
                'data-term-suggestions' => '#' . $suggestionsId,
                'data-suggest-url' => Url::fromPath(
                    'selenium/suggest-object',
                    ['_disableLayout' => true, 'showCompact' => true]
                ),
            ]
        );


        $this->add(HtmlElement::create('div', [
            'id' => $suggestionsId,
            'class' => 'search-suggestions'
        ]));

        $this->addElement('submit', 'submit', [
            'label' => $this->getSubmitButtonLabel()
        ]);
        if ($this->id !== null) {
            /** @var FormSubmitElement $removeButton */
            $removeButton = $this->createElement('submit', 'remove', [
                'label'          => $this->translate('Remove Testsuite'),
                'class'          => 'btn-remove',
                'formnovalidate' => true
            ]);
            $this->registerElement($removeButton);

            /** @var HtmlDocument $wrapper */
            $wrapper = $this->getElement('submit')->getWrapper();
            $wrapper->prepend($removeButton);


        } elseif ($this->renderCreateAndShowButton) {
            $createAndShow = $this->createElement('submit', 'create_show', [
                'label' => $this->translate('Create and Show'),
            ]);
            $this->registerElement($createAndShow);

            /** @var HtmlDocument $wrapper */
            $wrapper = $this->getElement('submit')->getWrapper();
            $wrapper->prepend($createAndShow);
        }

    }
    public function validate()
    {
        return parent::validate(); // TODO: Change the autogenerated stub
    }

    public function onSuccess()
    {
        /** @var Connection db */

        $values = $this->getValues();
        $model = new Testsuite();

        if ($this->id === null) {
            $values['ctime']=(new \DateTime())->format("Uv");
            $model->setValues($values);
            $model->save();
        } else {
            $model = Testsuite::on(Database::get())->filter(Filter::equal('id', $this->id))->first();
            if ($this->getPopulatedValue('remove')) {
                $model->delete();
                return;
            }

            $model->setValues($values);
            $model->id=$this->id;
            $model->save();

        }

    }


}
