<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium\Controllers;


use gipfl\Diff\HtmlRenderer\SideBySideDiff;
use gipfl\Diff\PhpDiff;
use Icinga\Exception\Http\HttpException;
use Icinga\Exception\NotFoundError;

use Icinga\Module\Selenium\Controller;

use Icinga\Module\Selenium\Forms\ActivityForm;
use Icinga\Module\Selenium\Model\Activity;
use Icinga\Web\Notification;
use ipl\Html\Form;
use Icinga\Module\Selenium\Common\Database;

use ipl\Html\Html;
use ipl\Html\Table;
use ipl\Stdlib\Filter;
use ipl\Web\Url;
use ipl\Web\Widget\Icon;


class ActivityController extends Controller
{
    /** @var $activity Activity The Activity object */
    protected $activity;
    protected $db;

    public function init()
    {
        if(!$this->Auth()->hasPermission("selenium/activity/restore")){
            throw new HttpException(401,"Not allowed!");
        }
        $this->db=Database::get();

    }

    public function newAction()
    {
        throw new \Exception("This action is disabled!");
        $this->setTitle($this->translate('New Activity'));

        $values = [];

        $form = (ActivityForm::fromId(null))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(ActivityForm::ON_SUCCESS, function (ActivityForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Activity successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/activities')
                    );
                } else {
                    Notification::success($this->translate('Updated Activity successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/activities')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }

    public function viewAction()
    {
        $this->setTitle($this->translate('View Activity'));

        $id = $this->params->getRequired('id');

        $query = Activity::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));


        $activity = $query->first();
        if ($activity === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->activity = $activity;
        $this->addContent(Html::tag('h1',[],"Activity"));
        $table = new Table();

        $table->add(Html::tag('tr',[],[Html::tag('th',[],"Type"), Html::tag('td',[],$activity->model)]));
        $table->add(Html::tag('tr',[],[Html::tag('th',[],"Name"), Html::tag('td',[],$activity->getOtherModel()->name)]));
        $table->add(Html::tag('tr',[],[Html::tag('th',[],"User"), Html::tag('td',[],$activity->user)]));
        $table->add(Html::tag('tr',[],[Html::tag('th',[],"Date"), Html::tag('td',[],$activity->ctime->format("c"))]));
        $this->addContent($table);

        $div=Html::tag("p");


        $a = Html::tag("a",['target'=>'_self', 'class'=>'button-link','href'=>Url::fromPath('selenium/activity/restore',['id'=>$activity->id])],"Restore former object");
        $div->add($a);
        $this->addContent($div);

        $table->add(Html::tag('br'));

        $this->addContent(new SideBySideDiff(new PhpDiff($activity->old, $activity->new)));
    }
    public function editAction()
    {
        throw new \Exception("This action is disabled!");
        $this->setTitle($this->translate('Edit Activity'));

        $id = $this->params->getRequired('id');

        $query = Activity::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));


        $activity = $query->first();
        if ($activity === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->activity = $activity;




        $values = $this->activity->getValues();




        $form = (ActivityForm::fromId($id))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(ActivityForm::ON_SUCCESS, function (ActivityForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Activity successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/activities')
                    );
                } else {
                    Notification::success($this->translate('Updated Activity successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/activities')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }
    public function restoreAction()
    {


        $id = $this->params->getRequired('id');

        $query = Activity::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));


        $activity = $query->first();
        if ($activity === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->activity = $activity;

        $activity->restoreModel();
        $this->redirectNow("selenium/activities");
    }

    protected function redirectForm(Form $form, $url)
    {
        if (
            $form->hasBeenSubmitted()
            && ((isset($form->valid) && $form->valid === true)
                || $form->isValid())
        ) {
            $this->redirectNow($url);
        }
    }
}
