<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium\Controllers;


use Icinga\Application\Modules\Module;
use Icinga\Exception\Http\HttpException;
use Icinga\Exception\NotFoundError;

use Icinga\Module\Selenium\ProjectRestrictor;
use Icinga\Module\Selenium\SuiteHelperIcingaDb;
use Icinga\Module\Selenium\SuiteHelperIdo;
use Icinga\Module\Selenium\TestsuiteRestrictor;
use Icinga\Module\Selenium\Controller;
use Icinga\Module\Selenium\Forms\TestsuiteForm;
use Icinga\Module\Selenium\Model\Testsuite;
use Icinga\Web\Notification;
use ipl\Html\Form;
use Icinga\Module\Selenium\Common\Database;

use ipl\Html\Html;
use ipl\Stdlib\Filter;
use ipl\Web\Url;


class TestsuiteController extends Controller
{
    /** @var $testsuite Testsuite The Testsuite object */
    protected $testsuite;
    protected $db;

    public function init()
    {
        if(!$this->Auth()->hasPermission("selenium/testsuite/modify")){
            throw new HttpException(401,"Not allowed!");
        }
        $this->db=Database::get();

    }

    public function runAction()
    {
        $id = $this->params->getRequired('id');
        $this->testsuite = Testsuite::findbyPrimaryKey($id);

        $suite_ref = $this->params->get('suite-ref');
        $test_ref = $this->params->get('test-ref');

        $object_backend = \Icinga\Application\Config::module('selenium')->getSection('backend')->get('object');

        if($object_backend === "monitoring" && Module::exists('monitoring')){
            $helper = new SuiteHelperIdo(Database::get(),$this->testsuite);
        }else{
            $helper = new SuiteHelperIcingaDb(Database::get(),$this->testsuite);
        }

        if($suite_ref !== null && $test_ref != null){
            $testrun = $helper->runTest($suite_ref,$test_ref);
            if($testrun != false){
                $this->redirectNow(Url::fromPath("selenium/testrun/view",['id'=>$testrun->id]));
            }else{
                $this->addContent(Html::tag('p',"Something went wrong"));
            }
            return;
        }elseif($suite_ref !== null){
            $testrun = $helper->runSuite($suite_ref);
            if($testrun != false){
                $this->redirectNow(Url::fromPath("selenium/testrun/view",['id'=>$testrun->id]));
            }else{
                $this->addContent(Html::tag('p',"Something went wrong"));
            }
        }else{
            $testrun = $helper->runAll();
            if($testrun != false){
                $this->redirectNow(Url::fromPath("selenium/testrun/view",['id'=>$testrun->id]));
            }else{
                $this->addContent(Html::tag('p',"Something went wrong"));
            }
        }


        $this->addContent(Html::tag('p',"Something asdasdasd wrong"));


    }
    public function newAction()
    {

        $this->setTitle($this->translate('New Testsuite'));

        $values = ['proxy'=>$this->Config()->get('selenium','proxy')];

        $form = (TestsuiteForm::fromId(null))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(TestsuiteForm::ON_SUCCESS, function (TestsuiteForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Testsuite successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testsuites')
                    );
                } else {
                    Notification::success($this->translate('Updated Testsuite successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testsuites')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }

    public function editAction()
    {

        $this->setTitle($this->translate('Edit Testsuite'));

        $id = $this->params->getRequired('id');

        $query = Testsuite::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));

        $restrictor = new ProjectRestrictor();
        $restrictor->applyRestrictions($query);

        $testsuite = $query->first();
        if ($testsuite === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->testsuite = $testsuite;




        $values = $this->testsuite->getValues();




        $form = (TestsuiteForm::fromId($id))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(TestsuiteForm::ON_SUCCESS, function (TestsuiteForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Testsuite successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testsuites')
                    );
                } else {
                    Notification::success($this->translate('Updated Testsuite successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testsuites')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }

    protected function redirectForm(Form $form, $url)
    {
        if (
            $form->hasBeenSubmitted()
            && ((isset($form->valid) && $form->valid === true)
                || $form->isValid())
        ) {
            $this->redirectNow($url);
        }
    }
}
