<?php

/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium\Controllers;

use Icinga\Module\Selenium\BinaryHelper;
use Icinga\Module\Selenium\ProvidedHook\SeleniumHealth;
use Icinga\Module\Selenium\ProvidedHook\SeleniumServiceHealth;
use Icinga\Web\Url;
use ipl\Html\Html;
use ipl\Web\Compat\CompatController;

class IndexController extends CompatController
{

    public function indexAction()
    {
        $this->addTitleTab(t('Selenium'));
        $this->addContent(Html::tag('h1', 'Selenium'));
        $this->addContent(Html::tag('h2', 'What is Selenium?'));
        $quote = Html::tag('q', ['cite'=>"https://en.wikipedia.org/wiki/Selenium_(software)"],"Selenium is an open source umbrella project for a range of tools and libraries aimed at supporting browser automation. It provides a playback tool for authoring functional tests across most modern web browsers, without the need to learn a test scripting language (Selenium IDE).");
        $this->addContent(Html::tag('blockquote',null,$quote));
        $this->addContent(Html::tag('p',['class'=>'ta-right']," - https://en.wikipedia.org/wiki/Selenium_(software)"));
        $this->addContent(Html::tag('h2', 'Selenium IDE'));
        $this->addContent(Html::tag('p', 'The Selenium IDE is used to test and save a collenction of tests you want to execute.
        You can download the Selenium IDE here:'));
        $seleniumUrl="https://www.selenium.dev/selenium-ide/";
        $this->addContent(Html::tag('a', ['href'=>$seleniumUrl],$seleniumUrl));
        $this->addContent(Html::tag('h2', 'Documentation'));
        $this->addContent(Html::tag('p', 'You can find a detailed documentation of this module here:'));
        $docUrl=Url::fromPath('doc/module/selenium/chapter/selenium-module-about');
        $this->addContent(Html::tag('a', ['href'=>$docUrl],"Documentation"));


        $this->addContent(Html::tag('h2', 'Versions'));

        $a = new BinaryHelper();
        list($versionMismatch,$chromeVersion,$driverVersion) = $a->needsUpdate();

        $table =Html::tag('table',['class'=>'common-table']);
        $header =Html::tag('tr');
        $table->add($header);
        $header->add(Html::tag('th',['class'=>'w20em'],'Resource'));
        $header->add(Html::tag('th','Version'));
        $module =Html::tag('tr');
        $module->add(Html::tag('td','Selenium Icinga Module'));
        $module->add(Html::tag('td',$this->Module()->getVersion()));
        $table->add($module);

        $driver =Html::tag('tr');
        $driver->add(Html::tag('td','Chrome Web Driver'));
        $driver->add(Html::tag('td',$driverVersion));
        $table->add($driver);

        $chrome =Html::tag('tr');
        $chrome->add(Html::tag('td','Chrome Version'));
        $chrome->add(Html::tag('td',$chromeVersion));
        $table->add($chrome);

        $this->addContent($table);

        $this->addContent(Html::tag('h2', 'Status'));

        $table =Html::tag('table',['class'=>'common-table']);
        $header =Html::tag('tr');
        $table->add($header);
        $header->add(Html::tag('th',['class'=>'w20em'],'Resource'));
        $header->add(Html::tag('th','Status'));
        $header->add(Html::tag('th','Reason'));
        $header->add(Html::tag('th','Repair'));
        $service =Html::tag('tr');

        $b = new SeleniumServiceHealth();
        $b->checkHealth();
        $service->add(Html::tag('td','Selenium Service'));


        if($b->getState() > 1){
            $service->add(Html::tag('td',Html::tag('span',['class'=>'state-ball state-critical ball-size-m'])));
            $service->add(Html::tag('td',$b->getMessage()));
            $service->add(Html::tag('td',Html::tag('a',['data-base-target'=>"_next", 'target'=>'_next','href'=>Url::fromPath('selenium/service/restart')],'Restart Service')));
        }else{
            $service->add(Html::tag('td',Html::tag('span',['class'=>'state-ball state-up ball-size-m'])));
            $service->add(Html::tag('td',''));

        }
        $table->add($service);


        $chromeDriver =Html::tag('tr');
        $chromeDriver->add(Html::tag('td','Chrome Driver'));
        if($versionMismatch){
            if($driverVersion == "0"){
                $chromeDriver->add(Html::tag('td',Html::tag('span',['class'=>'state-ball state-critical ball-size-m'])));

            }else{
                $chromeDriver->add(Html::tag('td',Html::tag('span',['class'=>'state-ball state-warning ball-size-m'])));

            }
            $chromeDriver->add(Html::tag('td',$chromeVersion." != ".$driverVersion));
            $chromeDriver->add(Html::tag('td',Html::tag('a',['data-base-target'=>"_next",'target'=>'_next','href'=>Url::fromPath('selenium/driver/init')],'Init ChromeDriver')));


        }else{
            $chromeDriver->add(Html::tag('td',Html::tag('span',['class'=>'state-ball state-up ball-size-m'])));
            $chromeDriver->add(Html::tag('td',''));

        }

        $table->add($chromeDriver);


        $this->addContent($table);



    }


}
