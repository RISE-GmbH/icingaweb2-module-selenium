<?php

namespace Icinga\Module\Selenium\Controllers;

use Icinga\Application\Config;
use Icinga\Exception\ConfigurationError;
use Icinga\Module\Director\Objects\IcingaCommand;

use Icinga\Module\Selenium\DirectorConfig;
use Icinga\Module\Selenium\Forms\DirectorConfigForm;
use Icinga\Web\Notification;
use Icinga\Web\Widget\Tab;
use Icinga\Web\Widget\Tabs;
use ipl\Html\Html;
use ipl\Html\HtmlString;
use ipl\Web\Compat\CompatController;
use ipl\Web\Url;
use ipl\Web\Widget\ActionLink;
use ipl\Web\Widget\Link;

class DirectorController extends CompatController
{
    public function init()
    {
        $this->assertPermission('config/selenium');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $this->assertPermission('director/admin');
        $this->mergeTabs($this->Module()->getConfigTabs()->activate('config/director'));

        if ($this->params->get('action') === 'sync') {
            $this->sync();
            return;
        }
        $this->addControl(new ActionLink(
            'Sync to Director',
            Url::fromPath('selenium/director', ['action' => 'sync']),
            'sync'
        ));
        try {
            $this->addContent(Html::tag('h1', null, "Director Settings"));
            $form = (new DirectorConfigForm())->setDb((new DirectorConfig())->db())->setIniConfig(Config::module('selenium', "director"));

            $form->handleRequest();
            $this->addContent(new HtmlString($form));
            $config = new DirectorConfig();
            $this->addCommand($config->createCommand(), $config);

        } catch (ConfigurationError $e) {
            $this->addContent(
                Html::tag('h1', ['class' => 'state-hint error'], $this->translate(
                    'Icinga Director has not been configured on this system: %s',
                    $e->getMessage()
                ))
            );
        }

    }


    protected function sync()
    {
        $config = new DirectorConfig();
        if ($config->sync()) {
            Notification::success('Commands have been updated in Icinga Director');
        } else {
            Notification::success('Nothing changed, commands are fine');
        }
        $this->redirectNow($this->getRequest()->getUrl()->without('action'));
    }

    /**
     * @param IcingaCommand $command
     * @param DirectorConfig $config
     */
    protected function addCommand(IcingaCommand $command, DirectorConfig $config)
    {
        $name = $command->getObjectName();
        $this->addContent(Html::tag('h1', null, $name));
        if ($config->commandExists($command)) {
            $link = new Link(
                $name,
                Url::fromPath('director/command', ['name' => $name]),
                ['data-base-target' => '_next']
            );

            if ($config->commandDiffers($command)) {
                $this->addContent($this->createHint(
                    Html::sprintf(
                        'The CheckCommand %s exists but differs in your Icinga Director',
                        $link
                    ),
                    'warning'
                ));
            } else {
                $this->addContent($this->createHint(
                    Html::sprintf(
                        'The CheckCommand definition for %s is fine',
                        $link
                    ),
                    'ok'
                ));
            }

            $link2 = new Link(
                $name,
                Url::fromPath('director/command/fields', ['name' => $name]),
                ['data-base-target' => '_next']
            );

            if ($config->datafieldsDiffer($command)) {
                $this->addContent($this->createHint(
                    Html::sprintf(
                        'The Datafields %s exists but differ in your Icinga Director',
                        $link2
                    ),
                    'warning'
                ));
                $table = Html::tag('table',['class'=>'commoc-table']);
                $tr = Html::tag('tr',[]);
                $th= Html::tag('th',[],'Field');
                $tr->add($th);
                $th= Html::tag('th',[],'Status');
                $tr->add($th);
                $table->add($tr);
                foreach ($config->syncDatafields($command,false)['fields'] as $name=>$result){
                    $tr = Html::tag('tr',[]);
                    $td= Html::tag('td',[],$name);
                    $tr->add($td);
                    $td= Html::tag('td',[],$result['status']);
                    $tr->add($td);
                    $table->add($tr);
                }
                $this->addContent($table);
            }else{
                $this->addContent($this->createHint(
                    Html::sprintf(
                        'The Datafields are fine for %s is fine',
                        $link2
                    ),
                    'ok'
                ));
            }

        } else {
            $this->addContent($this->createHint(
                'Command does not exist in your Icinga Director',
                'warning'
            ));
        }


        $this->addContent(Html::tag('p', null));

        $this->addContent(Html::tag('pre', null, (string) $command));

    }

    protected function createHint($msg, $state)
    {
        return Html::tag('p', ['class' => ['state-hint', $state]], $msg);
    }

    /**
     * Merge tabs with other tabs contained in this tab panel
     *
     * @param Tabs $tabs
     *
     * @return void
     */
    protected function mergeTabs(Tabs $tabs): void
    {
        /** @var Tab $tab */
        foreach ($tabs->getTabs() as $tab) {
            $this->tabs->add($tab->getName(), $tab);
        }
    }
}
