<?php

/* originally from Icinga Web 2 X.509 Module | (c) 2018 Icinga GmbH | GPLv2 */
/* generated by icingaweb2-module-scaffoldbuilder | GPLv2+ */

namespace Icinga\Module\Selenium\Controllers;


use Icinga\Exception\Http\HttpException;
use Icinga\Exception\NotFoundError;

use Icinga\Module\Selenium\ProjectRestrictor;
use Icinga\Module\Selenium\TestrunRestrictor;
use Icinga\Module\Selenium\Controller;
use Icinga\Module\Selenium\Forms\TestrunForm;
use Icinga\Module\Selenium\Model\Testrun;
use Icinga\Web\Notification;
use ipl\Html\Form;
use Icinga\Module\Selenium\Common\Database;

use ipl\Html\Html;
use ipl\Stdlib\Filter;
use ipl\Web\Url;


class TestrunController extends Controller
{
    /** @var Testrun The Testrun object */
    protected $testrun;
    protected $db;

    public function init()
    {
        if(!$this->Auth()->hasPermission("selenium/testrun/modify")){
            throw new HttpException(401,"Not allowed!");
        }
        $this->db=Database::get();

    }
    public function viewAction()
    {
        $this->setTitle($this->translate('Testrun'));

        $id = $this->params->getRequired('id');

        $query = Testrun::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));

        $restrictor = new TestrunRestrictor();
        $restrictor->applyRestrictions($query);

        $restrictor2 = new ProjectRestrictor();
        $restrictor2->applyRestrictions($query);
        $testrun = $query->first();
        if ($testrun === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->testrun = $testrun;


        $data = json_decode($testrun->result,true);
        if($testrun->status === 'success'){
            $this->addContent(Html::tag('h1',['style'=>"color:green;"],"Testrun was successful"));
        }elseif($testrun->status === 'running'){
            $this->addContent(Html::tag('h1',['style'=>"color:blue;"],"Testrun still running"));
        }else{
            $this->addContent(Html::tag('h1',['style'=>"color:red;"],"Testrun failed"));
        }
        if(isset($data['tests'])){
            $this->addContent(Html::tag('h1',"Summary"));
            $summary = Html::tag('table');
            $row = Html::tag('tr');
            $row->add(Html::tag('th',null, "Suite"));
            $row->add(Html::tag('th',null, "Test"));
            $row->add(Html::tag('th',null, "Title"));
            $row->add(Html::tag('th',null, "status"));
            $row->add(Html::tag('th',null, "duration"));
            $row->add(Html::tag('th',null, "reason"));
            $summary->add($row);
            $this->addContent($summary);
            foreach ($data['tests'] as $test){
                if($test['planned']){

                    $currentSuite=null;
                    foreach ($data['suites'] as $suite){
                        if(in_array($test['id'],$suite['tests'])){
                            $currentSuite=$suite;
                            $this->addContent(Html::tag('h1',"Suite"." ".$suite['name']));

                        }
                    }
                    $this->addContent(Html::tag('h2',"Test"." ".$test['name']));

                    foreach ($test['commands'] as $command){
                        $div = Html::tag('div',['style'=>'page-break-inside: avoid;']);
                        $titleText = $command['title'];
                        if(strlen($titleText) > 100){
                            $titleText = substr($titleText, 0,100)."...";
                        }
                        if($command['status']==="ok"){
                            $title = Html::tag('h3',$titleText);

                        }else{
                            $title = Html::tag('h3',['style'=>'color:red;'],$titleText);

                        }
                        $div->add($title);
                        if(isset($command['img']) && file_exists($command['img'])){
                            $image = Html::tag('img',['style'=>'max-with:100%;','src'=>'data:image/png;base64, '.base64_encode(file_get_contents($command['img']))]);
                            $div->add($image);
                        }

                        $this->addContent($div);
                        $color = null;
                        if($command['status']!== "ok"){
                            $color = ['style'=>"color:red;"];

                        }

                        $row = Html::tag('tr');
                        $row->add(Html::tag('td',$color, $suite['name']));
                        $row->add(Html::tag('td',$color, $test['name']));
                        $row->add(Html::tag('td',$color, $titleText));

                        $row->add(Html::tag('td',$color, $command['status']));
                        $row->add(Html::tag('td',$color, $command['duration']));
                        $row->add(Html::tag('td',$color, $command['reason']));
                        $summary->add($row);

                    }
                }

            }
        }

    }
    public function newAction()
    {

        $this->setTitle($this->translate('New Testrun'));

        $values = [];

        $form = (TestrunForm::fromId(null))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(TestrunForm::ON_SUCCESS, function (TestrunForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Testrun successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testruns')
                    );
                } else {
                    Notification::success($this->translate('Updated Testrun successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testruns')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }

    public function editAction()
    {

        $this->setTitle($this->translate('Edit Testrun'));

        $id = $this->params->getRequired('id');

        $query = Testrun::on($this->db)->with([

        ]);
        $query->filter(Filter::equal('id', $id));

        $restrictor = new ProjectRestrictor();
        $restrictor->applyRestrictions($query);

        $testrun = $query->first();
        if ($testrun === null) {
            throw new NotFoundError(t('Entry not found'));
        }

        $this->testrun = $testrun;




        $values = $this->testrun->getValues();




        $form = (TestrunForm::fromId($id))->setDb($this->db)
            ->setAction((string) Url::fromRequest())->setRenderCreateAndShowButton(false)
            ->populate($values)
            ->on(TestrunForm::ON_SUCCESS, function (TestrunForm $form) {
                $pressedButton = $form->getPressedSubmitElement();
                if ($pressedButton && $pressedButton->getName() === 'remove') {
                    Notification::success($this->translate('Removed Testrun successfully'));


                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testruns')
                    );
                } else {
                    Notification::success($this->translate('Updated Testrun successfully'));

                    $this->closeModalAndRefreshRemainingViews(
                        Url::fromPath('selenium/testruns')
                    );
                }
            })
            ->handleRequest($this->getServerRequest());

        $this->addContent($form);

    }

    protected function redirectForm(Form $form, $url)
    {
        if (
            $form->hasBeenSubmitted()
            && ((isset($form->valid) && $form->valid === true)
                || $form->isValid())
        ) {
            $this->redirectNow($url);
        }
    }
}
